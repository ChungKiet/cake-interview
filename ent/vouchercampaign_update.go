// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ChungKiet/cake-interview/ent/predicate"
	"github.com/ChungKiet/cake-interview/ent/vouchercampaign"
)

// VoucherCampaignUpdate is the builder for updating VoucherCampaign entities.
type VoucherCampaignUpdate struct {
	config
	hooks    []Hook
	mutation *VoucherCampaignMutation
}

// Where appends a list predicates to the VoucherCampaignUpdate builder.
func (vcu *VoucherCampaignUpdate) Where(ps ...predicate.VoucherCampaign) *VoucherCampaignUpdate {
	vcu.mutation.Where(ps...)
	return vcu
}

// SetCampaignID sets the "campaign_id" field.
func (vcu *VoucherCampaignUpdate) SetCampaignID(i int64) *VoucherCampaignUpdate {
	vcu.mutation.ResetCampaignID()
	vcu.mutation.SetCampaignID(i)
	return vcu
}

// AddCampaignID adds i to the "campaign_id" field.
func (vcu *VoucherCampaignUpdate) AddCampaignID(i int64) *VoucherCampaignUpdate {
	vcu.mutation.AddCampaignID(i)
	return vcu
}

// SetVoucherID sets the "voucher_id" field.
func (vcu *VoucherCampaignUpdate) SetVoucherID(i int64) *VoucherCampaignUpdate {
	vcu.mutation.ResetVoucherID()
	vcu.mutation.SetVoucherID(i)
	return vcu
}

// AddVoucherID adds i to the "voucher_id" field.
func (vcu *VoucherCampaignUpdate) AddVoucherID(i int64) *VoucherCampaignUpdate {
	vcu.mutation.AddVoucherID(i)
	return vcu
}

// SetStartDay sets the "start_day" field.
func (vcu *VoucherCampaignUpdate) SetStartDay(t time.Time) *VoucherCampaignUpdate {
	vcu.mutation.SetStartDay(t)
	return vcu
}

// SetValidTo sets the "valid_to" field.
func (vcu *VoucherCampaignUpdate) SetValidTo(t time.Time) *VoucherCampaignUpdate {
	vcu.mutation.SetValidTo(t)
	return vcu
}

// SetUpdatedAt sets the "updated_at" field.
func (vcu *VoucherCampaignUpdate) SetUpdatedAt(t time.Time) *VoucherCampaignUpdate {
	vcu.mutation.SetUpdatedAt(t)
	return vcu
}

// Mutation returns the VoucherCampaignMutation object of the builder.
func (vcu *VoucherCampaignUpdate) Mutation() *VoucherCampaignMutation {
	return vcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vcu *VoucherCampaignUpdate) Save(ctx context.Context) (int, error) {
	vcu.defaults()
	return withHooks(ctx, vcu.sqlSave, vcu.mutation, vcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vcu *VoucherCampaignUpdate) SaveX(ctx context.Context) int {
	affected, err := vcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vcu *VoucherCampaignUpdate) Exec(ctx context.Context) error {
	_, err := vcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcu *VoucherCampaignUpdate) ExecX(ctx context.Context) {
	if err := vcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vcu *VoucherCampaignUpdate) defaults() {
	if _, ok := vcu.mutation.UpdatedAt(); !ok {
		v := vouchercampaign.UpdateDefaultUpdatedAt()
		vcu.mutation.SetUpdatedAt(v)
	}
}

func (vcu *VoucherCampaignUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(vouchercampaign.Table, vouchercampaign.Columns, sqlgraph.NewFieldSpec(vouchercampaign.FieldID, field.TypeInt))
	if ps := vcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vcu.mutation.CampaignID(); ok {
		_spec.SetField(vouchercampaign.FieldCampaignID, field.TypeInt64, value)
	}
	if value, ok := vcu.mutation.AddedCampaignID(); ok {
		_spec.AddField(vouchercampaign.FieldCampaignID, field.TypeInt64, value)
	}
	if value, ok := vcu.mutation.VoucherID(); ok {
		_spec.SetField(vouchercampaign.FieldVoucherID, field.TypeInt64, value)
	}
	if value, ok := vcu.mutation.AddedVoucherID(); ok {
		_spec.AddField(vouchercampaign.FieldVoucherID, field.TypeInt64, value)
	}
	if value, ok := vcu.mutation.StartDay(); ok {
		_spec.SetField(vouchercampaign.FieldStartDay, field.TypeTime, value)
	}
	if value, ok := vcu.mutation.ValidTo(); ok {
		_spec.SetField(vouchercampaign.FieldValidTo, field.TypeTime, value)
	}
	if value, ok := vcu.mutation.UpdatedAt(); ok {
		_spec.SetField(vouchercampaign.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vouchercampaign.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vcu.mutation.done = true
	return n, nil
}

// VoucherCampaignUpdateOne is the builder for updating a single VoucherCampaign entity.
type VoucherCampaignUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VoucherCampaignMutation
}

// SetCampaignID sets the "campaign_id" field.
func (vcuo *VoucherCampaignUpdateOne) SetCampaignID(i int64) *VoucherCampaignUpdateOne {
	vcuo.mutation.ResetCampaignID()
	vcuo.mutation.SetCampaignID(i)
	return vcuo
}

// AddCampaignID adds i to the "campaign_id" field.
func (vcuo *VoucherCampaignUpdateOne) AddCampaignID(i int64) *VoucherCampaignUpdateOne {
	vcuo.mutation.AddCampaignID(i)
	return vcuo
}

// SetVoucherID sets the "voucher_id" field.
func (vcuo *VoucherCampaignUpdateOne) SetVoucherID(i int64) *VoucherCampaignUpdateOne {
	vcuo.mutation.ResetVoucherID()
	vcuo.mutation.SetVoucherID(i)
	return vcuo
}

// AddVoucherID adds i to the "voucher_id" field.
func (vcuo *VoucherCampaignUpdateOne) AddVoucherID(i int64) *VoucherCampaignUpdateOne {
	vcuo.mutation.AddVoucherID(i)
	return vcuo
}

// SetStartDay sets the "start_day" field.
func (vcuo *VoucherCampaignUpdateOne) SetStartDay(t time.Time) *VoucherCampaignUpdateOne {
	vcuo.mutation.SetStartDay(t)
	return vcuo
}

// SetValidTo sets the "valid_to" field.
func (vcuo *VoucherCampaignUpdateOne) SetValidTo(t time.Time) *VoucherCampaignUpdateOne {
	vcuo.mutation.SetValidTo(t)
	return vcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vcuo *VoucherCampaignUpdateOne) SetUpdatedAt(t time.Time) *VoucherCampaignUpdateOne {
	vcuo.mutation.SetUpdatedAt(t)
	return vcuo
}

// Mutation returns the VoucherCampaignMutation object of the builder.
func (vcuo *VoucherCampaignUpdateOne) Mutation() *VoucherCampaignMutation {
	return vcuo.mutation
}

// Where appends a list predicates to the VoucherCampaignUpdate builder.
func (vcuo *VoucherCampaignUpdateOne) Where(ps ...predicate.VoucherCampaign) *VoucherCampaignUpdateOne {
	vcuo.mutation.Where(ps...)
	return vcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vcuo *VoucherCampaignUpdateOne) Select(field string, fields ...string) *VoucherCampaignUpdateOne {
	vcuo.fields = append([]string{field}, fields...)
	return vcuo
}

// Save executes the query and returns the updated VoucherCampaign entity.
func (vcuo *VoucherCampaignUpdateOne) Save(ctx context.Context) (*VoucherCampaign, error) {
	vcuo.defaults()
	return withHooks(ctx, vcuo.sqlSave, vcuo.mutation, vcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vcuo *VoucherCampaignUpdateOne) SaveX(ctx context.Context) *VoucherCampaign {
	node, err := vcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vcuo *VoucherCampaignUpdateOne) Exec(ctx context.Context) error {
	_, err := vcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcuo *VoucherCampaignUpdateOne) ExecX(ctx context.Context) {
	if err := vcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vcuo *VoucherCampaignUpdateOne) defaults() {
	if _, ok := vcuo.mutation.UpdatedAt(); !ok {
		v := vouchercampaign.UpdateDefaultUpdatedAt()
		vcuo.mutation.SetUpdatedAt(v)
	}
}

func (vcuo *VoucherCampaignUpdateOne) sqlSave(ctx context.Context) (_node *VoucherCampaign, err error) {
	_spec := sqlgraph.NewUpdateSpec(vouchercampaign.Table, vouchercampaign.Columns, sqlgraph.NewFieldSpec(vouchercampaign.FieldID, field.TypeInt))
	id, ok := vcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VoucherCampaign.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vouchercampaign.FieldID)
		for _, f := range fields {
			if !vouchercampaign.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vouchercampaign.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vcuo.mutation.CampaignID(); ok {
		_spec.SetField(vouchercampaign.FieldCampaignID, field.TypeInt64, value)
	}
	if value, ok := vcuo.mutation.AddedCampaignID(); ok {
		_spec.AddField(vouchercampaign.FieldCampaignID, field.TypeInt64, value)
	}
	if value, ok := vcuo.mutation.VoucherID(); ok {
		_spec.SetField(vouchercampaign.FieldVoucherID, field.TypeInt64, value)
	}
	if value, ok := vcuo.mutation.AddedVoucherID(); ok {
		_spec.AddField(vouchercampaign.FieldVoucherID, field.TypeInt64, value)
	}
	if value, ok := vcuo.mutation.StartDay(); ok {
		_spec.SetField(vouchercampaign.FieldStartDay, field.TypeTime, value)
	}
	if value, ok := vcuo.mutation.ValidTo(); ok {
		_spec.SetField(vouchercampaign.FieldValidTo, field.TypeTime, value)
	}
	if value, ok := vcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(vouchercampaign.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &VoucherCampaign{config: vcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vouchercampaign.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vcuo.mutation.done = true
	return _node, nil
}
