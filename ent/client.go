// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/ChungKiet/cake-interview/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/ChungKiet/cake-interview/ent/campaign"
	"github.com/ChungKiet/cake-interview/ent/card"
	"github.com/ChungKiet/cake-interview/ent/user"
	"github.com/ChungKiet/cake-interview/ent/userbalance"
	"github.com/ChungKiet/cake-interview/ent/uservoucher"
	"github.com/ChungKiet/cake-interview/ent/voucher"
	"github.com/ChungKiet/cake-interview/ent/vouchercampaign"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Campaign is the client for interacting with the Campaign builders.
	Campaign *CampaignClient
	// Card is the client for interacting with the Card builders.
	Card *CardClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserBalance is the client for interacting with the UserBalance builders.
	UserBalance *UserBalanceClient
	// UserVoucher is the client for interacting with the UserVoucher builders.
	UserVoucher *UserVoucherClient
	// Voucher is the client for interacting with the Voucher builders.
	Voucher *VoucherClient
	// VoucherCampaign is the client for interacting with the VoucherCampaign builders.
	VoucherCampaign *VoucherCampaignClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Campaign = NewCampaignClient(c.config)
	c.Card = NewCardClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserBalance = NewUserBalanceClient(c.config)
	c.UserVoucher = NewUserVoucherClient(c.config)
	c.Voucher = NewVoucherClient(c.config)
	c.VoucherCampaign = NewVoucherCampaignClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Campaign:        NewCampaignClient(cfg),
		Card:            NewCardClient(cfg),
		User:            NewUserClient(cfg),
		UserBalance:     NewUserBalanceClient(cfg),
		UserVoucher:     NewUserVoucherClient(cfg),
		Voucher:         NewVoucherClient(cfg),
		VoucherCampaign: NewVoucherCampaignClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Campaign:        NewCampaignClient(cfg),
		Card:            NewCardClient(cfg),
		User:            NewUserClient(cfg),
		UserBalance:     NewUserBalanceClient(cfg),
		UserVoucher:     NewUserVoucherClient(cfg),
		Voucher:         NewVoucherClient(cfg),
		VoucherCampaign: NewVoucherCampaignClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Campaign.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Campaign, c.Card, c.User, c.UserBalance, c.UserVoucher, c.Voucher,
		c.VoucherCampaign,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Campaign, c.Card, c.User, c.UserBalance, c.UserVoucher, c.Voucher,
		c.VoucherCampaign,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CampaignMutation:
		return c.Campaign.mutate(ctx, m)
	case *CardMutation:
		return c.Card.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserBalanceMutation:
		return c.UserBalance.mutate(ctx, m)
	case *UserVoucherMutation:
		return c.UserVoucher.mutate(ctx, m)
	case *VoucherMutation:
		return c.Voucher.mutate(ctx, m)
	case *VoucherCampaignMutation:
		return c.VoucherCampaign.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CampaignClient is a client for the Campaign schema.
type CampaignClient struct {
	config
}

// NewCampaignClient returns a client for the Campaign from the given config.
func NewCampaignClient(c config) *CampaignClient {
	return &CampaignClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `campaign.Hooks(f(g(h())))`.
func (c *CampaignClient) Use(hooks ...Hook) {
	c.hooks.Campaign = append(c.hooks.Campaign, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `campaign.Intercept(f(g(h())))`.
func (c *CampaignClient) Intercept(interceptors ...Interceptor) {
	c.inters.Campaign = append(c.inters.Campaign, interceptors...)
}

// Create returns a builder for creating a Campaign entity.
func (c *CampaignClient) Create() *CampaignCreate {
	mutation := newCampaignMutation(c.config, OpCreate)
	return &CampaignCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Campaign entities.
func (c *CampaignClient) CreateBulk(builders ...*CampaignCreate) *CampaignCreateBulk {
	return &CampaignCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CampaignClient) MapCreateBulk(slice any, setFunc func(*CampaignCreate, int)) *CampaignCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CampaignCreateBulk{err: fmt.Errorf("calling to CampaignClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CampaignCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CampaignCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Campaign.
func (c *CampaignClient) Update() *CampaignUpdate {
	mutation := newCampaignMutation(c.config, OpUpdate)
	return &CampaignUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CampaignClient) UpdateOne(ca *Campaign) *CampaignUpdateOne {
	mutation := newCampaignMutation(c.config, OpUpdateOne, withCampaign(ca))
	return &CampaignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CampaignClient) UpdateOneID(id int) *CampaignUpdateOne {
	mutation := newCampaignMutation(c.config, OpUpdateOne, withCampaignID(id))
	return &CampaignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Campaign.
func (c *CampaignClient) Delete() *CampaignDelete {
	mutation := newCampaignMutation(c.config, OpDelete)
	return &CampaignDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CampaignClient) DeleteOne(ca *Campaign) *CampaignDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CampaignClient) DeleteOneID(id int) *CampaignDeleteOne {
	builder := c.Delete().Where(campaign.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CampaignDeleteOne{builder}
}

// Query returns a query builder for Campaign.
func (c *CampaignClient) Query() *CampaignQuery {
	return &CampaignQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCampaign},
		inters: c.Interceptors(),
	}
}

// Get returns a Campaign entity by its id.
func (c *CampaignClient) Get(ctx context.Context, id int) (*Campaign, error) {
	return c.Query().Where(campaign.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CampaignClient) GetX(ctx context.Context, id int) *Campaign {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CampaignClient) Hooks() []Hook {
	return c.hooks.Campaign
}

// Interceptors returns the client interceptors.
func (c *CampaignClient) Interceptors() []Interceptor {
	return c.inters.Campaign
}

func (c *CampaignClient) mutate(ctx context.Context, m *CampaignMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CampaignCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CampaignUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CampaignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CampaignDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Campaign mutation op: %q", m.Op())
	}
}

// CardClient is a client for the Card schema.
type CardClient struct {
	config
}

// NewCardClient returns a client for the Card from the given config.
func NewCardClient(c config) *CardClient {
	return &CardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `card.Hooks(f(g(h())))`.
func (c *CardClient) Use(hooks ...Hook) {
	c.hooks.Card = append(c.hooks.Card, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `card.Intercept(f(g(h())))`.
func (c *CardClient) Intercept(interceptors ...Interceptor) {
	c.inters.Card = append(c.inters.Card, interceptors...)
}

// Create returns a builder for creating a Card entity.
func (c *CardClient) Create() *CardCreate {
	mutation := newCardMutation(c.config, OpCreate)
	return &CardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Card entities.
func (c *CardClient) CreateBulk(builders ...*CardCreate) *CardCreateBulk {
	return &CardCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CardClient) MapCreateBulk(slice any, setFunc func(*CardCreate, int)) *CardCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CardCreateBulk{err: fmt.Errorf("calling to CardClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CardCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Card.
func (c *CardClient) Update() *CardUpdate {
	mutation := newCardMutation(c.config, OpUpdate)
	return &CardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CardClient) UpdateOne(ca *Card) *CardUpdateOne {
	mutation := newCardMutation(c.config, OpUpdateOne, withCard(ca))
	return &CardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CardClient) UpdateOneID(id int) *CardUpdateOne {
	mutation := newCardMutation(c.config, OpUpdateOne, withCardID(id))
	return &CardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Card.
func (c *CardClient) Delete() *CardDelete {
	mutation := newCardMutation(c.config, OpDelete)
	return &CardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CardClient) DeleteOne(ca *Card) *CardDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CardClient) DeleteOneID(id int) *CardDeleteOne {
	builder := c.Delete().Where(card.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CardDeleteOne{builder}
}

// Query returns a query builder for Card.
func (c *CardClient) Query() *CardQuery {
	return &CardQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCard},
		inters: c.Interceptors(),
	}
}

// Get returns a Card entity by its id.
func (c *CardClient) Get(ctx context.Context, id int) (*Card, error) {
	return c.Query().Where(card.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CardClient) GetX(ctx context.Context, id int) *Card {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CardClient) Hooks() []Hook {
	return c.hooks.Card
}

// Interceptors returns the client interceptors.
func (c *CardClient) Interceptors() []Interceptor {
	return c.inters.Card
}

func (c *CardClient) mutate(ctx context.Context, m *CardMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CardCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CardUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CardDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Card mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserBalanceClient is a client for the UserBalance schema.
type UserBalanceClient struct {
	config
}

// NewUserBalanceClient returns a client for the UserBalance from the given config.
func NewUserBalanceClient(c config) *UserBalanceClient {
	return &UserBalanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userbalance.Hooks(f(g(h())))`.
func (c *UserBalanceClient) Use(hooks ...Hook) {
	c.hooks.UserBalance = append(c.hooks.UserBalance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userbalance.Intercept(f(g(h())))`.
func (c *UserBalanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserBalance = append(c.inters.UserBalance, interceptors...)
}

// Create returns a builder for creating a UserBalance entity.
func (c *UserBalanceClient) Create() *UserBalanceCreate {
	mutation := newUserBalanceMutation(c.config, OpCreate)
	return &UserBalanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserBalance entities.
func (c *UserBalanceClient) CreateBulk(builders ...*UserBalanceCreate) *UserBalanceCreateBulk {
	return &UserBalanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserBalanceClient) MapCreateBulk(slice any, setFunc func(*UserBalanceCreate, int)) *UserBalanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserBalanceCreateBulk{err: fmt.Errorf("calling to UserBalanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserBalanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserBalanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserBalance.
func (c *UserBalanceClient) Update() *UserBalanceUpdate {
	mutation := newUserBalanceMutation(c.config, OpUpdate)
	return &UserBalanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserBalanceClient) UpdateOne(ub *UserBalance) *UserBalanceUpdateOne {
	mutation := newUserBalanceMutation(c.config, OpUpdateOne, withUserBalance(ub))
	return &UserBalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserBalanceClient) UpdateOneID(id int) *UserBalanceUpdateOne {
	mutation := newUserBalanceMutation(c.config, OpUpdateOne, withUserBalanceID(id))
	return &UserBalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserBalance.
func (c *UserBalanceClient) Delete() *UserBalanceDelete {
	mutation := newUserBalanceMutation(c.config, OpDelete)
	return &UserBalanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserBalanceClient) DeleteOne(ub *UserBalance) *UserBalanceDeleteOne {
	return c.DeleteOneID(ub.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserBalanceClient) DeleteOneID(id int) *UserBalanceDeleteOne {
	builder := c.Delete().Where(userbalance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserBalanceDeleteOne{builder}
}

// Query returns a query builder for UserBalance.
func (c *UserBalanceClient) Query() *UserBalanceQuery {
	return &UserBalanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserBalance},
		inters: c.Interceptors(),
	}
}

// Get returns a UserBalance entity by its id.
func (c *UserBalanceClient) Get(ctx context.Context, id int) (*UserBalance, error) {
	return c.Query().Where(userbalance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserBalanceClient) GetX(ctx context.Context, id int) *UserBalance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserBalanceClient) Hooks() []Hook {
	return c.hooks.UserBalance
}

// Interceptors returns the client interceptors.
func (c *UserBalanceClient) Interceptors() []Interceptor {
	return c.inters.UserBalance
}

func (c *UserBalanceClient) mutate(ctx context.Context, m *UserBalanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserBalanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserBalanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserBalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserBalanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserBalance mutation op: %q", m.Op())
	}
}

// UserVoucherClient is a client for the UserVoucher schema.
type UserVoucherClient struct {
	config
}

// NewUserVoucherClient returns a client for the UserVoucher from the given config.
func NewUserVoucherClient(c config) *UserVoucherClient {
	return &UserVoucherClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `uservoucher.Hooks(f(g(h())))`.
func (c *UserVoucherClient) Use(hooks ...Hook) {
	c.hooks.UserVoucher = append(c.hooks.UserVoucher, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `uservoucher.Intercept(f(g(h())))`.
func (c *UserVoucherClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserVoucher = append(c.inters.UserVoucher, interceptors...)
}

// Create returns a builder for creating a UserVoucher entity.
func (c *UserVoucherClient) Create() *UserVoucherCreate {
	mutation := newUserVoucherMutation(c.config, OpCreate)
	return &UserVoucherCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserVoucher entities.
func (c *UserVoucherClient) CreateBulk(builders ...*UserVoucherCreate) *UserVoucherCreateBulk {
	return &UserVoucherCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserVoucherClient) MapCreateBulk(slice any, setFunc func(*UserVoucherCreate, int)) *UserVoucherCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserVoucherCreateBulk{err: fmt.Errorf("calling to UserVoucherClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserVoucherCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserVoucherCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserVoucher.
func (c *UserVoucherClient) Update() *UserVoucherUpdate {
	mutation := newUserVoucherMutation(c.config, OpUpdate)
	return &UserVoucherUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserVoucherClient) UpdateOne(uv *UserVoucher) *UserVoucherUpdateOne {
	mutation := newUserVoucherMutation(c.config, OpUpdateOne, withUserVoucher(uv))
	return &UserVoucherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserVoucherClient) UpdateOneID(id int) *UserVoucherUpdateOne {
	mutation := newUserVoucherMutation(c.config, OpUpdateOne, withUserVoucherID(id))
	return &UserVoucherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserVoucher.
func (c *UserVoucherClient) Delete() *UserVoucherDelete {
	mutation := newUserVoucherMutation(c.config, OpDelete)
	return &UserVoucherDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserVoucherClient) DeleteOne(uv *UserVoucher) *UserVoucherDeleteOne {
	return c.DeleteOneID(uv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserVoucherClient) DeleteOneID(id int) *UserVoucherDeleteOne {
	builder := c.Delete().Where(uservoucher.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserVoucherDeleteOne{builder}
}

// Query returns a query builder for UserVoucher.
func (c *UserVoucherClient) Query() *UserVoucherQuery {
	return &UserVoucherQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserVoucher},
		inters: c.Interceptors(),
	}
}

// Get returns a UserVoucher entity by its id.
func (c *UserVoucherClient) Get(ctx context.Context, id int) (*UserVoucher, error) {
	return c.Query().Where(uservoucher.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserVoucherClient) GetX(ctx context.Context, id int) *UserVoucher {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserVoucherClient) Hooks() []Hook {
	return c.hooks.UserVoucher
}

// Interceptors returns the client interceptors.
func (c *UserVoucherClient) Interceptors() []Interceptor {
	return c.inters.UserVoucher
}

func (c *UserVoucherClient) mutate(ctx context.Context, m *UserVoucherMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserVoucherCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserVoucherUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserVoucherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserVoucherDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserVoucher mutation op: %q", m.Op())
	}
}

// VoucherClient is a client for the Voucher schema.
type VoucherClient struct {
	config
}

// NewVoucherClient returns a client for the Voucher from the given config.
func NewVoucherClient(c config) *VoucherClient {
	return &VoucherClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `voucher.Hooks(f(g(h())))`.
func (c *VoucherClient) Use(hooks ...Hook) {
	c.hooks.Voucher = append(c.hooks.Voucher, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `voucher.Intercept(f(g(h())))`.
func (c *VoucherClient) Intercept(interceptors ...Interceptor) {
	c.inters.Voucher = append(c.inters.Voucher, interceptors...)
}

// Create returns a builder for creating a Voucher entity.
func (c *VoucherClient) Create() *VoucherCreate {
	mutation := newVoucherMutation(c.config, OpCreate)
	return &VoucherCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Voucher entities.
func (c *VoucherClient) CreateBulk(builders ...*VoucherCreate) *VoucherCreateBulk {
	return &VoucherCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VoucherClient) MapCreateBulk(slice any, setFunc func(*VoucherCreate, int)) *VoucherCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VoucherCreateBulk{err: fmt.Errorf("calling to VoucherClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VoucherCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VoucherCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Voucher.
func (c *VoucherClient) Update() *VoucherUpdate {
	mutation := newVoucherMutation(c.config, OpUpdate)
	return &VoucherUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VoucherClient) UpdateOne(v *Voucher) *VoucherUpdateOne {
	mutation := newVoucherMutation(c.config, OpUpdateOne, withVoucher(v))
	return &VoucherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VoucherClient) UpdateOneID(id int) *VoucherUpdateOne {
	mutation := newVoucherMutation(c.config, OpUpdateOne, withVoucherID(id))
	return &VoucherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Voucher.
func (c *VoucherClient) Delete() *VoucherDelete {
	mutation := newVoucherMutation(c.config, OpDelete)
	return &VoucherDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VoucherClient) DeleteOne(v *Voucher) *VoucherDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VoucherClient) DeleteOneID(id int) *VoucherDeleteOne {
	builder := c.Delete().Where(voucher.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VoucherDeleteOne{builder}
}

// Query returns a query builder for Voucher.
func (c *VoucherClient) Query() *VoucherQuery {
	return &VoucherQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVoucher},
		inters: c.Interceptors(),
	}
}

// Get returns a Voucher entity by its id.
func (c *VoucherClient) Get(ctx context.Context, id int) (*Voucher, error) {
	return c.Query().Where(voucher.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VoucherClient) GetX(ctx context.Context, id int) *Voucher {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *VoucherClient) Hooks() []Hook {
	return c.hooks.Voucher
}

// Interceptors returns the client interceptors.
func (c *VoucherClient) Interceptors() []Interceptor {
	return c.inters.Voucher
}

func (c *VoucherClient) mutate(ctx context.Context, m *VoucherMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VoucherCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VoucherUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VoucherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VoucherDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Voucher mutation op: %q", m.Op())
	}
}

// VoucherCampaignClient is a client for the VoucherCampaign schema.
type VoucherCampaignClient struct {
	config
}

// NewVoucherCampaignClient returns a client for the VoucherCampaign from the given config.
func NewVoucherCampaignClient(c config) *VoucherCampaignClient {
	return &VoucherCampaignClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vouchercampaign.Hooks(f(g(h())))`.
func (c *VoucherCampaignClient) Use(hooks ...Hook) {
	c.hooks.VoucherCampaign = append(c.hooks.VoucherCampaign, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `vouchercampaign.Intercept(f(g(h())))`.
func (c *VoucherCampaignClient) Intercept(interceptors ...Interceptor) {
	c.inters.VoucherCampaign = append(c.inters.VoucherCampaign, interceptors...)
}

// Create returns a builder for creating a VoucherCampaign entity.
func (c *VoucherCampaignClient) Create() *VoucherCampaignCreate {
	mutation := newVoucherCampaignMutation(c.config, OpCreate)
	return &VoucherCampaignCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VoucherCampaign entities.
func (c *VoucherCampaignClient) CreateBulk(builders ...*VoucherCampaignCreate) *VoucherCampaignCreateBulk {
	return &VoucherCampaignCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VoucherCampaignClient) MapCreateBulk(slice any, setFunc func(*VoucherCampaignCreate, int)) *VoucherCampaignCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VoucherCampaignCreateBulk{err: fmt.Errorf("calling to VoucherCampaignClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VoucherCampaignCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VoucherCampaignCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VoucherCampaign.
func (c *VoucherCampaignClient) Update() *VoucherCampaignUpdate {
	mutation := newVoucherCampaignMutation(c.config, OpUpdate)
	return &VoucherCampaignUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VoucherCampaignClient) UpdateOne(vc *VoucherCampaign) *VoucherCampaignUpdateOne {
	mutation := newVoucherCampaignMutation(c.config, OpUpdateOne, withVoucherCampaign(vc))
	return &VoucherCampaignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VoucherCampaignClient) UpdateOneID(id int) *VoucherCampaignUpdateOne {
	mutation := newVoucherCampaignMutation(c.config, OpUpdateOne, withVoucherCampaignID(id))
	return &VoucherCampaignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VoucherCampaign.
func (c *VoucherCampaignClient) Delete() *VoucherCampaignDelete {
	mutation := newVoucherCampaignMutation(c.config, OpDelete)
	return &VoucherCampaignDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VoucherCampaignClient) DeleteOne(vc *VoucherCampaign) *VoucherCampaignDeleteOne {
	return c.DeleteOneID(vc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VoucherCampaignClient) DeleteOneID(id int) *VoucherCampaignDeleteOne {
	builder := c.Delete().Where(vouchercampaign.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VoucherCampaignDeleteOne{builder}
}

// Query returns a query builder for VoucherCampaign.
func (c *VoucherCampaignClient) Query() *VoucherCampaignQuery {
	return &VoucherCampaignQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVoucherCampaign},
		inters: c.Interceptors(),
	}
}

// Get returns a VoucherCampaign entity by its id.
func (c *VoucherCampaignClient) Get(ctx context.Context, id int) (*VoucherCampaign, error) {
	return c.Query().Where(vouchercampaign.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VoucherCampaignClient) GetX(ctx context.Context, id int) *VoucherCampaign {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *VoucherCampaignClient) Hooks() []Hook {
	return c.hooks.VoucherCampaign
}

// Interceptors returns the client interceptors.
func (c *VoucherCampaignClient) Interceptors() []Interceptor {
	return c.inters.VoucherCampaign
}

func (c *VoucherCampaignClient) mutate(ctx context.Context, m *VoucherCampaignMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VoucherCampaignCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VoucherCampaignUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VoucherCampaignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VoucherCampaignDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VoucherCampaign mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Campaign, Card, User, UserBalance, UserVoucher, Voucher,
		VoucherCampaign []ent.Hook
	}
	inters struct {
		Campaign, Card, User, UserBalance, UserVoucher, Voucher,
		VoucherCampaign []ent.Interceptor
	}
)
