// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ChungKiet/cake-interview/ent/vouchercampaign"
)

// VoucherCampaignCreate is the builder for creating a VoucherCampaign entity.
type VoucherCampaignCreate struct {
	config
	mutation *VoucherCampaignMutation
	hooks    []Hook
}

// SetCampaignID sets the "campaign_id" field.
func (vcc *VoucherCampaignCreate) SetCampaignID(i int64) *VoucherCampaignCreate {
	vcc.mutation.SetCampaignID(i)
	return vcc
}

// SetVoucherID sets the "voucher_id" field.
func (vcc *VoucherCampaignCreate) SetVoucherID(i int64) *VoucherCampaignCreate {
	vcc.mutation.SetVoucherID(i)
	return vcc
}

// SetStartDay sets the "start_day" field.
func (vcc *VoucherCampaignCreate) SetStartDay(t time.Time) *VoucherCampaignCreate {
	vcc.mutation.SetStartDay(t)
	return vcc
}

// SetValidTo sets the "valid_to" field.
func (vcc *VoucherCampaignCreate) SetValidTo(t time.Time) *VoucherCampaignCreate {
	vcc.mutation.SetValidTo(t)
	return vcc
}

// SetCreatedAt sets the "created_at" field.
func (vcc *VoucherCampaignCreate) SetCreatedAt(t time.Time) *VoucherCampaignCreate {
	vcc.mutation.SetCreatedAt(t)
	return vcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vcc *VoucherCampaignCreate) SetNillableCreatedAt(t *time.Time) *VoucherCampaignCreate {
	if t != nil {
		vcc.SetCreatedAt(*t)
	}
	return vcc
}

// SetUpdatedAt sets the "updated_at" field.
func (vcc *VoucherCampaignCreate) SetUpdatedAt(t time.Time) *VoucherCampaignCreate {
	vcc.mutation.SetUpdatedAt(t)
	return vcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vcc *VoucherCampaignCreate) SetNillableUpdatedAt(t *time.Time) *VoucherCampaignCreate {
	if t != nil {
		vcc.SetUpdatedAt(*t)
	}
	return vcc
}

// Mutation returns the VoucherCampaignMutation object of the builder.
func (vcc *VoucherCampaignCreate) Mutation() *VoucherCampaignMutation {
	return vcc.mutation
}

// Save creates the VoucherCampaign in the database.
func (vcc *VoucherCampaignCreate) Save(ctx context.Context) (*VoucherCampaign, error) {
	vcc.defaults()
	return withHooks(ctx, vcc.sqlSave, vcc.mutation, vcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vcc *VoucherCampaignCreate) SaveX(ctx context.Context) *VoucherCampaign {
	v, err := vcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcc *VoucherCampaignCreate) Exec(ctx context.Context) error {
	_, err := vcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcc *VoucherCampaignCreate) ExecX(ctx context.Context) {
	if err := vcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vcc *VoucherCampaignCreate) defaults() {
	if _, ok := vcc.mutation.CreatedAt(); !ok {
		v := vouchercampaign.DefaultCreatedAt()
		vcc.mutation.SetCreatedAt(v)
	}
	if _, ok := vcc.mutation.UpdatedAt(); !ok {
		v := vouchercampaign.DefaultUpdatedAt()
		vcc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vcc *VoucherCampaignCreate) check() error {
	if _, ok := vcc.mutation.CampaignID(); !ok {
		return &ValidationError{Name: "campaign_id", err: errors.New(`ent: missing required field "VoucherCampaign.campaign_id"`)}
	}
	if _, ok := vcc.mutation.VoucherID(); !ok {
		return &ValidationError{Name: "voucher_id", err: errors.New(`ent: missing required field "VoucherCampaign.voucher_id"`)}
	}
	if _, ok := vcc.mutation.StartDay(); !ok {
		return &ValidationError{Name: "start_day", err: errors.New(`ent: missing required field "VoucherCampaign.start_day"`)}
	}
	if _, ok := vcc.mutation.ValidTo(); !ok {
		return &ValidationError{Name: "valid_to", err: errors.New(`ent: missing required field "VoucherCampaign.valid_to"`)}
	}
	if _, ok := vcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VoucherCampaign.created_at"`)}
	}
	if _, ok := vcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VoucherCampaign.updated_at"`)}
	}
	return nil
}

func (vcc *VoucherCampaignCreate) sqlSave(ctx context.Context) (*VoucherCampaign, error) {
	if err := vcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vcc.mutation.id = &_node.ID
	vcc.mutation.done = true
	return _node, nil
}

func (vcc *VoucherCampaignCreate) createSpec() (*VoucherCampaign, *sqlgraph.CreateSpec) {
	var (
		_node = &VoucherCampaign{config: vcc.config}
		_spec = sqlgraph.NewCreateSpec(vouchercampaign.Table, sqlgraph.NewFieldSpec(vouchercampaign.FieldID, field.TypeInt))
	)
	if value, ok := vcc.mutation.CampaignID(); ok {
		_spec.SetField(vouchercampaign.FieldCampaignID, field.TypeInt64, value)
		_node.CampaignID = value
	}
	if value, ok := vcc.mutation.VoucherID(); ok {
		_spec.SetField(vouchercampaign.FieldVoucherID, field.TypeInt64, value)
		_node.VoucherID = value
	}
	if value, ok := vcc.mutation.StartDay(); ok {
		_spec.SetField(vouchercampaign.FieldStartDay, field.TypeTime, value)
		_node.StartDay = value
	}
	if value, ok := vcc.mutation.ValidTo(); ok {
		_spec.SetField(vouchercampaign.FieldValidTo, field.TypeTime, value)
		_node.ValidTo = value
	}
	if value, ok := vcc.mutation.CreatedAt(); ok {
		_spec.SetField(vouchercampaign.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vcc.mutation.UpdatedAt(); ok {
		_spec.SetField(vouchercampaign.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// VoucherCampaignCreateBulk is the builder for creating many VoucherCampaign entities in bulk.
type VoucherCampaignCreateBulk struct {
	config
	err      error
	builders []*VoucherCampaignCreate
}

// Save creates the VoucherCampaign entities in the database.
func (vccb *VoucherCampaignCreateBulk) Save(ctx context.Context) ([]*VoucherCampaign, error) {
	if vccb.err != nil {
		return nil, vccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vccb.builders))
	nodes := make([]*VoucherCampaign, len(vccb.builders))
	mutators := make([]Mutator, len(vccb.builders))
	for i := range vccb.builders {
		func(i int, root context.Context) {
			builder := vccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VoucherCampaignMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vccb *VoucherCampaignCreateBulk) SaveX(ctx context.Context) []*VoucherCampaign {
	v, err := vccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vccb *VoucherCampaignCreateBulk) Exec(ctx context.Context) error {
	_, err := vccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vccb *VoucherCampaignCreateBulk) ExecX(ctx context.Context) {
	if err := vccb.Exec(ctx); err != nil {
		panic(err)
	}
}
