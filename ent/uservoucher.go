// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ChungKiet/cake-interview/ent/uservoucher"
)

// UserVoucher is the model entity for the UserVoucher schema.
type UserVoucher struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VoucherCampaignID holds the value of the "voucher_campaign_id" field.
	VoucherCampaignID int64 `json:"voucher_campaign_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserVoucher) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case uservoucher.FieldID, uservoucher.FieldVoucherCampaignID:
			values[i] = new(sql.NullInt64)
		case uservoucher.FieldUserID:
			values[i] = new(sql.NullString)
		case uservoucher.FieldCreatedAt, uservoucher.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserVoucher fields.
func (uv *UserVoucher) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case uservoucher.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uv.ID = int(value.Int64)
		case uservoucher.FieldVoucherCampaignID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field voucher_campaign_id", values[i])
			} else if value.Valid {
				uv.VoucherCampaignID = value.Int64
			}
		case uservoucher.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uv.UserID = value.String
			}
		case uservoucher.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uv.CreatedAt = value.Time
			}
		case uservoucher.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uv.UpdatedAt = value.Time
			}
		default:
			uv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserVoucher.
// This includes values selected through modifiers, order, etc.
func (uv *UserVoucher) Value(name string) (ent.Value, error) {
	return uv.selectValues.Get(name)
}

// Update returns a builder for updating this UserVoucher.
// Note that you need to call UserVoucher.Unwrap() before calling this method if this UserVoucher
// was returned from a transaction, and the transaction was committed or rolled back.
func (uv *UserVoucher) Update() *UserVoucherUpdateOne {
	return NewUserVoucherClient(uv.config).UpdateOne(uv)
}

// Unwrap unwraps the UserVoucher entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uv *UserVoucher) Unwrap() *UserVoucher {
	_tx, ok := uv.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserVoucher is not a transactional entity")
	}
	uv.config.driver = _tx.drv
	return uv
}

// String implements the fmt.Stringer.
func (uv *UserVoucher) String() string {
	var builder strings.Builder
	builder.WriteString("UserVoucher(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uv.ID))
	builder.WriteString("voucher_campaign_id=")
	builder.WriteString(fmt.Sprintf("%v", uv.VoucherCampaignID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(uv.UserID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(uv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(uv.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserVouchers is a parsable slice of UserVoucher.
type UserVouchers []*UserVoucher
