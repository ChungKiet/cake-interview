// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ChungKiet/cake-interview/ent/campaign"
	"github.com/ChungKiet/cake-interview/ent/predicate"
)

// CampaignUpdate is the builder for updating Campaign entities.
type CampaignUpdate struct {
	config
	hooks    []Hook
	mutation *CampaignMutation
}

// Where appends a list predicates to the CampaignUpdate builder.
func (cu *CampaignUpdate) Where(ps ...predicate.Campaign) *CampaignUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CampaignUpdate) SetName(s string) *CampaignUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetCurrentSlot sets the "current_slot" field.
func (cu *CampaignUpdate) SetCurrentSlot(i int64) *CampaignUpdate {
	cu.mutation.ResetCurrentSlot()
	cu.mutation.SetCurrentSlot(i)
	return cu
}

// AddCurrentSlot adds i to the "current_slot" field.
func (cu *CampaignUpdate) AddCurrentSlot(i int64) *CampaignUpdate {
	cu.mutation.AddCurrentSlot(i)
	return cu
}

// SetStartDay sets the "start_day" field.
func (cu *CampaignUpdate) SetStartDay(t time.Time) *CampaignUpdate {
	cu.mutation.SetStartDay(t)
	return cu
}

// SetEndDay sets the "end_day" field.
func (cu *CampaignUpdate) SetEndDay(t time.Time) *CampaignUpdate {
	cu.mutation.SetEndDay(t)
	return cu
}

// SetTotalSlot sets the "total_slot" field.
func (cu *CampaignUpdate) SetTotalSlot(i int64) *CampaignUpdate {
	cu.mutation.ResetTotalSlot()
	cu.mutation.SetTotalSlot(i)
	return cu
}

// AddTotalSlot adds i to the "total_slot" field.
func (cu *CampaignUpdate) AddTotalSlot(i int64) *CampaignUpdate {
	cu.mutation.AddTotalSlot(i)
	return cu
}

// SetIsFull sets the "is_full" field.
func (cu *CampaignUpdate) SetIsFull(b bool) *CampaignUpdate {
	cu.mutation.SetIsFull(b)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CampaignUpdate) SetUpdatedAt(t time.Time) *CampaignUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// Mutation returns the CampaignMutation object of the builder.
func (cu *CampaignUpdate) Mutation() *CampaignMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CampaignUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CampaignUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CampaignUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CampaignUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CampaignUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := campaign.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *CampaignUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(campaign.Table, campaign.Columns, sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(campaign.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.CurrentSlot(); ok {
		_spec.SetField(campaign.FieldCurrentSlot, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedCurrentSlot(); ok {
		_spec.AddField(campaign.FieldCurrentSlot, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.StartDay(); ok {
		_spec.SetField(campaign.FieldStartDay, field.TypeTime, value)
	}
	if value, ok := cu.mutation.EndDay(); ok {
		_spec.SetField(campaign.FieldEndDay, field.TypeTime, value)
	}
	if value, ok := cu.mutation.TotalSlot(); ok {
		_spec.SetField(campaign.FieldTotalSlot, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedTotalSlot(); ok {
		_spec.AddField(campaign.FieldTotalSlot, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.IsFull(); ok {
		_spec.SetField(campaign.FieldIsFull, field.TypeBool, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(campaign.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{campaign.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CampaignUpdateOne is the builder for updating a single Campaign entity.
type CampaignUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CampaignMutation
}

// SetName sets the "name" field.
func (cuo *CampaignUpdateOne) SetName(s string) *CampaignUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetCurrentSlot sets the "current_slot" field.
func (cuo *CampaignUpdateOne) SetCurrentSlot(i int64) *CampaignUpdateOne {
	cuo.mutation.ResetCurrentSlot()
	cuo.mutation.SetCurrentSlot(i)
	return cuo
}

// AddCurrentSlot adds i to the "current_slot" field.
func (cuo *CampaignUpdateOne) AddCurrentSlot(i int64) *CampaignUpdateOne {
	cuo.mutation.AddCurrentSlot(i)
	return cuo
}

// SetStartDay sets the "start_day" field.
func (cuo *CampaignUpdateOne) SetStartDay(t time.Time) *CampaignUpdateOne {
	cuo.mutation.SetStartDay(t)
	return cuo
}

// SetEndDay sets the "end_day" field.
func (cuo *CampaignUpdateOne) SetEndDay(t time.Time) *CampaignUpdateOne {
	cuo.mutation.SetEndDay(t)
	return cuo
}

// SetTotalSlot sets the "total_slot" field.
func (cuo *CampaignUpdateOne) SetTotalSlot(i int64) *CampaignUpdateOne {
	cuo.mutation.ResetTotalSlot()
	cuo.mutation.SetTotalSlot(i)
	return cuo
}

// AddTotalSlot adds i to the "total_slot" field.
func (cuo *CampaignUpdateOne) AddTotalSlot(i int64) *CampaignUpdateOne {
	cuo.mutation.AddTotalSlot(i)
	return cuo
}

// SetIsFull sets the "is_full" field.
func (cuo *CampaignUpdateOne) SetIsFull(b bool) *CampaignUpdateOne {
	cuo.mutation.SetIsFull(b)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CampaignUpdateOne) SetUpdatedAt(t time.Time) *CampaignUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// Mutation returns the CampaignMutation object of the builder.
func (cuo *CampaignUpdateOne) Mutation() *CampaignMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CampaignUpdate builder.
func (cuo *CampaignUpdateOne) Where(ps ...predicate.Campaign) *CampaignUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CampaignUpdateOne) Select(field string, fields ...string) *CampaignUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Campaign entity.
func (cuo *CampaignUpdateOne) Save(ctx context.Context) (*Campaign, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CampaignUpdateOne) SaveX(ctx context.Context) *Campaign {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CampaignUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CampaignUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CampaignUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := campaign.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *CampaignUpdateOne) sqlSave(ctx context.Context) (_node *Campaign, err error) {
	_spec := sqlgraph.NewUpdateSpec(campaign.Table, campaign.Columns, sqlgraph.NewFieldSpec(campaign.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Campaign.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, campaign.FieldID)
		for _, f := range fields {
			if !campaign.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != campaign.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(campaign.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CurrentSlot(); ok {
		_spec.SetField(campaign.FieldCurrentSlot, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedCurrentSlot(); ok {
		_spec.AddField(campaign.FieldCurrentSlot, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.StartDay(); ok {
		_spec.SetField(campaign.FieldStartDay, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.EndDay(); ok {
		_spec.SetField(campaign.FieldEndDay, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.TotalSlot(); ok {
		_spec.SetField(campaign.FieldTotalSlot, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedTotalSlot(); ok {
		_spec.AddField(campaign.FieldTotalSlot, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.IsFull(); ok {
		_spec.SetField(campaign.FieldIsFull, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(campaign.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Campaign{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{campaign.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
