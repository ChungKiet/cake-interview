// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ChungKiet/cake-interview/ent/predicate"
	"github.com/ChungKiet/cake-interview/ent/vouchercampaign"
)

// VoucherCampaignDelete is the builder for deleting a VoucherCampaign entity.
type VoucherCampaignDelete struct {
	config
	hooks    []Hook
	mutation *VoucherCampaignMutation
}

// Where appends a list predicates to the VoucherCampaignDelete builder.
func (vcd *VoucherCampaignDelete) Where(ps ...predicate.VoucherCampaign) *VoucherCampaignDelete {
	vcd.mutation.Where(ps...)
	return vcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vcd *VoucherCampaignDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vcd.sqlExec, vcd.mutation, vcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vcd *VoucherCampaignDelete) ExecX(ctx context.Context) int {
	n, err := vcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vcd *VoucherCampaignDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(vouchercampaign.Table, sqlgraph.NewFieldSpec(vouchercampaign.FieldID, field.TypeInt))
	if ps := vcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vcd.mutation.done = true
	return affected, err
}

// VoucherCampaignDeleteOne is the builder for deleting a single VoucherCampaign entity.
type VoucherCampaignDeleteOne struct {
	vcd *VoucherCampaignDelete
}

// Where appends a list predicates to the VoucherCampaignDelete builder.
func (vcdo *VoucherCampaignDeleteOne) Where(ps ...predicate.VoucherCampaign) *VoucherCampaignDeleteOne {
	vcdo.vcd.mutation.Where(ps...)
	return vcdo
}

// Exec executes the deletion query.
func (vcdo *VoucherCampaignDeleteOne) Exec(ctx context.Context) error {
	n, err := vcdo.vcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{vouchercampaign.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vcdo *VoucherCampaignDeleteOne) ExecX(ctx context.Context) {
	if err := vcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
