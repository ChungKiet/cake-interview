// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ChungKiet/cake-interview/ent/predicate"
	"github.com/ChungKiet/cake-interview/ent/voucher"
)

// VoucherUpdate is the builder for updating Voucher entities.
type VoucherUpdate struct {
	config
	hooks    []Hook
	mutation *VoucherMutation
}

// Where appends a list predicates to the VoucherUpdate builder.
func (vu *VoucherUpdate) Where(ps ...predicate.Voucher) *VoucherUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetName sets the "name" field.
func (vu *VoucherUpdate) SetName(s string) *VoucherUpdate {
	vu.mutation.SetName(s)
	return vu
}

// SetType sets the "type" field.
func (vu *VoucherUpdate) SetType(s string) *VoucherUpdate {
	vu.mutation.SetType(s)
	return vu
}

// SetValue sets the "value" field.
func (vu *VoucherUpdate) SetValue(f float64) *VoucherUpdate {
	vu.mutation.ResetValue()
	vu.mutation.SetValue(f)
	return vu
}

// AddValue adds f to the "value" field.
func (vu *VoucherUpdate) AddValue(f float64) *VoucherUpdate {
	vu.mutation.AddValue(f)
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VoucherUpdate) SetUpdatedAt(t time.Time) *VoucherUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// Mutation returns the VoucherMutation object of the builder.
func (vu *VoucherUpdate) Mutation() *VoucherMutation {
	return vu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VoucherUpdate) Save(ctx context.Context) (int, error) {
	vu.defaults()
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VoucherUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VoucherUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VoucherUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VoucherUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := voucher.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

func (vu *VoucherUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(voucher.Table, voucher.Columns, sqlgraph.NewFieldSpec(voucher.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Name(); ok {
		_spec.SetField(voucher.FieldName, field.TypeString, value)
	}
	if value, ok := vu.mutation.GetType(); ok {
		_spec.SetField(voucher.FieldType, field.TypeString, value)
	}
	if value, ok := vu.mutation.Value(); ok {
		_spec.SetField(voucher.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := vu.mutation.AddedValue(); ok {
		_spec.AddField(voucher.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(voucher.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voucher.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VoucherUpdateOne is the builder for updating a single Voucher entity.
type VoucherUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VoucherMutation
}

// SetName sets the "name" field.
func (vuo *VoucherUpdateOne) SetName(s string) *VoucherUpdateOne {
	vuo.mutation.SetName(s)
	return vuo
}

// SetType sets the "type" field.
func (vuo *VoucherUpdateOne) SetType(s string) *VoucherUpdateOne {
	vuo.mutation.SetType(s)
	return vuo
}

// SetValue sets the "value" field.
func (vuo *VoucherUpdateOne) SetValue(f float64) *VoucherUpdateOne {
	vuo.mutation.ResetValue()
	vuo.mutation.SetValue(f)
	return vuo
}

// AddValue adds f to the "value" field.
func (vuo *VoucherUpdateOne) AddValue(f float64) *VoucherUpdateOne {
	vuo.mutation.AddValue(f)
	return vuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VoucherUpdateOne) SetUpdatedAt(t time.Time) *VoucherUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// Mutation returns the VoucherMutation object of the builder.
func (vuo *VoucherUpdateOne) Mutation() *VoucherMutation {
	return vuo.mutation
}

// Where appends a list predicates to the VoucherUpdate builder.
func (vuo *VoucherUpdateOne) Where(ps ...predicate.Voucher) *VoucherUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VoucherUpdateOne) Select(field string, fields ...string) *VoucherUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Voucher entity.
func (vuo *VoucherUpdateOne) Save(ctx context.Context) (*Voucher, error) {
	vuo.defaults()
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VoucherUpdateOne) SaveX(ctx context.Context) *Voucher {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VoucherUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VoucherUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VoucherUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := voucher.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

func (vuo *VoucherUpdateOne) sqlSave(ctx context.Context) (_node *Voucher, err error) {
	_spec := sqlgraph.NewUpdateSpec(voucher.Table, voucher.Columns, sqlgraph.NewFieldSpec(voucher.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Voucher.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, voucher.FieldID)
		for _, f := range fields {
			if !voucher.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != voucher.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Name(); ok {
		_spec.SetField(voucher.FieldName, field.TypeString, value)
	}
	if value, ok := vuo.mutation.GetType(); ok {
		_spec.SetField(voucher.FieldType, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Value(); ok {
		_spec.SetField(voucher.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := vuo.mutation.AddedValue(); ok {
		_spec.AddField(voucher.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(voucher.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Voucher{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voucher.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
